<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--spring中的依赖注入
        依赖注入： Dependency Injection
        IOC的作用：
            降低程序间的耦合
        依赖关系的管理：
            以后都交给spring来维护
        在当前类中需要用到其他类的对象，由Spring为了我们提供，我们只需要在配置文件中说明
        依赖关系的维护就称之为依赖注入
        依赖注入：
            能注入的数据，有三类:
                基本类型和String
                其他bean类型（在配置文件中或者注解配置过的bean）
                复杂类型/集合类型
            注入的方式，有三种：
                第一种，使用构造函数提供
                第二种：使用set的方法提供
                第三种：使用注解提供
    -->

   <!-- 使用构造函数注入
            使用标签：constructor-arg
            标签出现的位置：bean标签的内部
            标签中的属性：
                type:用于指定要注入的数据的数据库类型，该数据也是构造函数中的某个或某些参数的类型
                index:用于指定要注入的数据给构造函数中指定索引的参数赋值。索引的位置时从0开始的
                name：用于指定给构造函数中指定名称的参数赋值  常用
                =================以上三个属性用于指定给构造函数中的那个参数赋值=============
                value:用于给基本类型和String类型的数据所赋的值
                ref：用于指定其他的bean类型数据，它指的即是在spring的IOC核心容器中出现过的bean对象
           优势：
                 在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
           弊端：
                改变了bean对象的实例化方式，使得我们不需要这些注入的数据时，也必须定义
            -->
    <bean id="accountService" class="com.zjl.service.Impl.AccountServiceImpl" scope="singleton" init-method="init" destroy-method="destory">
        <constructor-arg name="name" value="test"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>
    <!--配置日期对象-->
    <bean id="now" class="java.util.Date"></bean>

  <!--  set方法注入（更常用）
        涉及的标签： property
        标签出现的位置：bean标签的内部
        标签属性：
            name：用于指定注入时调用的set方法名称
            value:用于给基本类型和String类型的数据所赋的值
            ref：用于指定其他的bean类型数据，它指的即是在spring的IOC核心容器中出现过的bean对象
    优势：创建对象时没有明确的限制，可以直接使用默认构造方法
    弊端：如果有某个成员必须有值，则获取对象时有可能set方法没有执行
    -->

    <bean id="accountService" class="com.zjl.service.Impl.AccountServiceImpl2" scope="singleton" init-method="init" destroy-method="destory">
        <property name="name" value="Test"></property>
        <property name="age" value="18"></property>
        <property name="birthday" ref="now"></property>
    </bean>


    <!--复杂类型的注入/集合类型的注入
        用于给list集合注入的标签：list，arry，set（位于property标签内）
        用于map集合注入的标签：map，prop（位于property标签内）
        总结：相同结构的集合标签可以互换
    -->

    <bean id="accountService" class="com.zjl.service.Impl.AccountServiceImpl3" scope="singleton" init-method="init" destroy-method="destory">
        <property name="myStr">
            <array>
                <value>Aaa</value>
                <value>Bbb</value>
                <value>Ccc</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>1</value>
                <value>2</value>
                <value>3</value>
                <value>4</value>
            </list>
        </property>

        <property name="mySet">
            <set>
                <value>1</value>
                <value>2</value>
                <value>3</value>
                <value>4</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="testA" value="aaa"></entry>
                <entry key="testB" value="bbb"></entry>
            </map>
        </property>

        <property name="myPro">
            <props>
                <prop key="testC"></prop>
            </props>
        </property>


    </bean>


    </beans>